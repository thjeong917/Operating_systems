cscope.out: =…->tf->
cscope.out: =…->tf->
exec.c:  proc->tf->eip = elf.entry;  // main
exec.c:  proc->tf->esp = sp;
proc.c:    p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
proc.c:    p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
proc.c:    p->tf->es = p->tf->ds;
proc.c:    p->tf->ss = p->tf->ds;
proc.c:    p->tf->eflags = FL_IF;
proc.c:    p->tf->esp = PGSIZE;
proc.c:    p->tf->eip = 0;  // beginning of initcode.S
proc.c:    np->tf->eax = 0;
proc.c:    p->tf->eax = 0;
proc.c:    p->tf->esp = ba + 4092;
proc.c:    *((uint*)(p->tf->esp)) = (uint)arg;
proc.c:    p->tf->esp -= 4;
proc.c:    *((uint*)(p->tf->esp)) = 0xFFFFFFFF;
proc.c:    p->tf->eip = (uint)start_routine;
syscall.c:  return fetchint(proc->tf->esp + 4 + 4*n, ip);
syscall.c:  num = proc->tf->eax;
syscall.c:    proc->tf->eax = syscalls[num]();
syscall.c:    proc->tf->eax = -1;
trap.c:  if(tf->trapno == T_SYSCALL){
trap.c:  switch(tf->trapno){
trap.c:            cpunum(), tf->cs, tf->eip);
trap.c:    if(proc == 0 || (tf->cs&3) == 0){
trap.c:              tf->trapno, cpunum(), tf->eip, rcr2());
trap.c:            proc->pid, proc->name, tf->trapno, tf->err, cpunum(), tf->eip,
trap.c:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
trap.c:  if(proc && proc->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER){
trap.c:  if(proc && proc->killed && (tf->cs&3) == DPL_USER)
